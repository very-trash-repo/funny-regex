package com.anarchyghost

import java.io.File
import java.nio.file.Paths
import java.text.DecimalFormat

//Слова должны быть в порядке убывания, т.е. "тысяч" должно идти после "тысячи"!!!

val h100 = mapOf(
    "сто" to 100,
    "ста" to 100,
    "сот" to 100,

    "двести" to 200,
    "двухсот" to 200,
    "двумстам" to 200,
    "двумястами" to 200,
    "двухстах" to 200,

    "триста" to 300,
    "трёхсот" to 300,
    "трехсот" to 300,
    "трёмстам" to 300,
    "тремястами" to 300,
    "трёхстах" to 300,
    "трехстах" to 300,

    "четыреста" to 400,
    "четырёхсот" to 400,
    "четырехсот" to 400,
    "четырёмстам" to 400,
    "четыремстам" to 400,
    "четырьмястами" to 400,
    "четырёхстах" to 400,
    "четырехстах" to 400,

    "пятьсот" to 500,
    "пятисот" to 500,
    "пятистам" to 500,
    "пятьюстами" to 500,
    "пятистах" to 500,

    "шестьсот" to 600,
    "шестисот" to 600,
    "шестистам" to 600,
    "шестьюстами" to 600,
    "шестистах" to 600,

    "семьсот" to 600,
    "семисот" to 600,
    "семистам" to 600,
    "семьюстами" to 600,
    "семистах" to 600,

    "восемьсот" to 600,
    "восьмисот" to 600,
    "восьмистам" to 600,
    "восьмьюстами" to 600,
    "восемьюстами" to 600,
    "восьмистах" to 600,

    "девятьсот" to 600,
    "девятисот" to 600,
    "девятистам" to 600,
    "девятьюстами" to 600,
    "девятистах" to 600,
)

val h010 = mapOf(
    "двадцати" to 20,
    "двадцатью" to 20,
    "двадцать" to 20,

    "тридцати" to 30,
    "тридцатью" to 30,
    "тридцать" to 30,

    "сорока" to 40,
    "сорок" to 40,

    "пятьдесяти" to 50,
    "пятьдесятью" to 50,
    "пятьдесят" to 50,

    "шестьдесяти" to 60,
    "шестьдесятью" to 60,
    "шестьдесят" to 60,

    "семьдесяти" to 70,
    "семьдесятью" to 70,
    "семьдесят" to 70,

    "восьмидесяти" to 80,
    "восьмьюдесятью" to 80,
    "восемьюдесятью" to 80,
    "восемьдесят" to 80,

    "девяносто" to 90,
    "девяноста" to 90,
)

val h011 = mapOf(
    "нолями" to 1,
    "нолём" to 1,
    "нолем" to 1,
    "нолей" to 1,
    "нолям" to 1,
    "нолях" to 1,
    "ноль" to 1,
    "ноля" to 1,
    "нолю" to 1,
    "ноле" to 1,
    "ноли" to 1,

    "одного" to 1,
    "одному" to 1,
    "одними" to 1,

    "одной" to 1,
    "одною" to 1,
    "одних" to 1,
    "одним" to 1,
    "одном" to 1,

    "один" to 1,
    "одна" to 1,
    "одну" to 1,
    "одно" to 1,
    "одни" to 1,

    "двумя" to 2,
    "двух" to 2,
    "двум" to 2,
    "два" to 2,
    "две" to 2,

    "тремя" to 3,
    "трёх" to 3,
    "трём" to 3,
    "трех" to 3,
    "трем" to 3,
    "три" to 3,

    "четырьмя" to 4,
    "четырёх" to 4,
    "четырём" to 4,
    "четырех" to 4,
    "четырем" to 4,
    "четыре" to 4,

    "пятью" to 5,
    "пять" to 5,
    "пяти" to 5,

    "шестью" to 6,
    "шесть" to 6,
    "шести" to 6,

    "семью" to 7,
    "семь" to 7,
    "семи" to 7,

    "восемью" to 8,
    "восьмью" to 8,
    "восемь" to 8,
    "восьми" to 8,

    "девятью" to 9,
    "девять" to 9,
    "девяти" to 9,

    "десятью" to 10,
    "десять" to 10,
    "десяти" to 10,

    "одиннадцатью" to 11,
    "одиннадцать" to 11,
    "одиннадцати" to 11,

    "двенадцатью" to 12,
    "двенадцать" to 12,
    "двенадцати" to 12,

    "тринадцатью" to 13,
    "тринадцать" to 13,
    "тринадцати" to 13,

    "четырнадцатью" to 14,
    "четырнадцать" to 14,
    "четырнадцати" to 14,

    "пятнадцатью" to 15,
    "пятнадцать" to 15,
    "пятнадцати" to 15,

    "шестнадцатью" to 16,
    "шестнадцать" to 16,
    "шестнадцати" to 16,

    "семнадцатью" to 17,
    "семнадцать" to 17,
    "семнадцати" to 17,

    "восемнадцатью" to 18,
    "восемнадцать" to 18,
    "восемнадцати" to 18,

    "девятнадцатью" to 19,
    "девятнадцать" to 19,
    "девятнадцати" to 19,
)

val tUnits = setOf(
    "тысячей",
    "тысячью",
    "тысячею",
    "тысячам",
    "тысячами",
    "тысячах",
    "тысяча",
    "тысячи",
    "тысяче",
    "тысячу",
    "тысяч",
)
val mUnits = setOf(
    "миллионами",
    "миллионов",
    "миллионом",
    "миллионам",
    "миллионах",
    "миллиона",
    "миллиону",
    "миллионе",
    "миллионы",
    "миллион",
)
val bUnits = setOf(
    "миллиардами",
    "миллиардов",
    "миллиардом",
    "миллиардам",
    "миллиардах",
    "миллиарда",
    "миллиарду",
    "миллиарде",
    "миллиарды",
    "миллиард",
)
val trUnits = setOf(
    "триллионами",
    "триллионов",
    "триллионом",
    "триллионам",
    "триллионах",
    "триллиону",
    "триллионе",
    "триллионы",
    "триллиона",
    "триллион",
)
val qUnits = setOf(
    "квадриллионами",
    "квадриллионов",
    "квадриллионом",
    "квадриллионам",
    "квадриллионах",
    "квадриллиона",
    "квадриллиону",
    "квадриллионе",
    "квадриллионы",
    "квадриллион",
)

val h = mapOf(
    "h100" to h100,
    "h010" to h010,
    "h011" to h011,
)

val units = mapOf(
    "t" to tUnits,
    "m" to mUnits,
    "b" to bUnits,
    "tr" to trUnits,
    "q" to qUnits,
)

val unitsCoefficient = mapOf(
    "e" to 1,
    "t" to 1_000,
    "m" to 1_000_000,
    "b" to 1_000_000_000,
    "tr" to 1_000_000_000_000,
    "q" to 1_000_000_000_000_000,
)


fun Collection<String>.orRegex() = joinToString("|")

fun hRegex(name: String) = h.map { (key, value) -> "(?<$name$key>${value.keys.orRegex()})" }
    .joinToString(prefix = "(", postfix = ")", separator = "\\s*)?(")

fun Collection<String>.unitsRegex(name: String) = "(?<$name>(${hRegex(name)}\\s+)?(${orRegex()}))"

val fullRegex = units.map { (key, value) -> value.unitsRegex(key) }
    .joinToString(prefix = "(", postfix = "\\s*)?(?<e>${hRegex("e")})?", separator = "\\s*)?(")


fun String.replaceTextToDigits() = fullRegex.toRegex().replace(this) {
    if (it.value.isBlank()) it.value
    else DecimalFormat("###,###").format(unitsCoefficient.keys.fold(0L) { uAcc, uKey ->
        it.groups[uKey]?.let { _ ->
            val coefficient = unitsCoefficient[uKey]!!
            val hAcc = h.keys.fold(0L) { hAcc, hKey ->
                it.groups["$uKey$hKey"]?.let { hGroup ->
                    hAcc + h[hKey]!![hGroup.value]!!
                } ?: hAcc
            }
            //Случа когда есть например только слово миллиард
            if (hAcc == 0L && coefficient != 1L) coefficient
            else uAcc + hAcc * coefficient
        } ?: uAcc
    }) + " "
}

fun String.toFile(): File = Paths.get(this).toFile()

fun main(args: Array<String>) {
    val file = args[0].toFile()
    check(file.isFile) {"File not found"}
    println(file.readText().replaceTextToDigits())
}
